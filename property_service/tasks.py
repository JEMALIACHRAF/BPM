from celery import Celery
from messagine import send_to_next_service
from config import CELERY_BROKER_URL, DECISION_QUEUE, NOTIFICATION_QUEUE

# Initialisation de Celery
celery = Celery("property_service", broker=CELERY_BROKER_URL, backend="rpc://")
celery.conf.task_queues = {
    
    "property_queue": {"exchange": "default", "routing_key": "property_queue"}
}

celery.conf.task_routes = {
    "tasks.evaluate_property": {"queue": "property_queue"}
}

@celery.task(name="tasks.evaluate_property")
def evaluate_property(property_data):
    """ T√¢che Celery pour v√©rifier la valeur du bien et le Loan-to-Value (LTV) """
    
    client_id = property_data["client_id"]
    montant_demande = property_data["montant_demande"]
    valeur_bien = property_data["valeur_bien"]
    
    # Calcul du Loan-to-Value (LTV)
    loan_to_value = (montant_demande / valeur_bien) * 100
    
    print(f"üè° [Client {client_id}] Loan-to-Value: {loan_to_value:.2f}%")

    # Crit√®res de validation
    if loan_to_value > 85:
        decision = "REJET√â"
        reason = "Loan-to-Value ratio trop √©lev√© (>85%)"
        send_to_next_service(NOTIFICATION_QUEUE, {"client_id": client_id, "status": "REJET√â", "reason": reason})
        return f"üî¥ [Client {client_id}] Rejet√©: {reason}"

    # Si valid√©, envoyer les infos √† Decision Service
    decision = "APPROUV√â"
    send_to_next_service(DECISION_QUEUE, "tasks.make_decision", {
    "client_id": client_id,
    "loan_to_value": round(loan_to_value, 2),
    "evaluation_bien": decision
    })


    return f"‚úÖ [Client {client_id}] √âvaluation du bien approuv√©e et envoy√©e au Decision Service."
